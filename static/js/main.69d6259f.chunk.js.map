{"version":3,"sources":["Components/Todo.jsx","Components/Todolist.jsx","Components/Todoform.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","removeTodo","ListItem","id","className","done","Typography","variant","style","color","textDecoration","label","IconButton","onClick","display","padding","Todolist","todos","console","log","List","map","key","Todoform","addTodo","uniqueId","useState","setTodos","onSubmit","e","preventDefault","trim","marginBottom","TextField","type","value","onChange","target","placeholder","Button","App","APIurl","useEffect","fetch","method","headers","then","response","json","responseJSON","body","JSON","stringify","resp","ok","status","data","catch","error","length","toggleCompleted","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iTAuBeA,MAnBf,YAAoC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,WAMlB,OACI,kBAACC,EAAA,EAAD,CAAUC,GAAIH,EAAKG,GAAIC,UAAWJ,EAAKK,KAAO,YAAc,IACxD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAO,CAAEC,MAAO,QAASC,eAAgBV,EAAKK,KAAO,eAAiB,OAASL,EAAKW,OAChH,kBAACC,EAAA,EAAD,CAAYL,QAAQ,YAAYM,QAPxC,WACIZ,EAAWD,EAAKG,KAM2CK,MAAO,CAAEM,QAAU,SAAUC,QAAS,IAAKN,MAAO,UACzG,kBAAC,IAAD,S,SCGGO,MAdf,YAA0C,IAArBC,EAAoB,EAApBA,MAAOhB,EAAa,EAAbA,WAGxB,OAFAiB,QAAQC,IAAIF,GAGR,kBAACG,EAAA,EAAD,KAEQH,EAAMI,KAAI,SAACrB,EAAKsB,GAAN,OACN,kBAAC,EAAD,CAAMA,IAAKA,EAAKtB,KAAMA,EAAMC,WAAYA,S,0BCgC7CsB,MAvCf,YAA0C,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAAY,EAEVC,mBAAS,CAChCvB,GAAI,GACJQ,MAAO,GACPN,MAAM,IAL2B,mBAE7BL,EAF6B,KAEvB2B,EAFuB,KAwBrC,OACI,0BAAMvB,UAAU,YAAYwB,SAZhC,SAAsBC,GAClBA,EAAEC,iBACE9B,EAAKW,MAAMoB,SAGXP,EAAQ,eAAMxB,EAAP,CAAaG,GAAIsB,KAExBE,EAAS,eAAK3B,EAAN,CAAYW,MAAO,QAKqBH,MAAO,CAAEwB,aAAc,SACvE,kBAACC,EAAA,EAAD,CACItB,MAAM,QACNuB,KAAK,OACLC,MAAOnC,EAAKW,MACZyB,SAtBZ,SAA2BP,GACvBF,EAAS,eAAK3B,EAAN,CAAYW,MAAOkB,EAAEQ,OAAOF,SACpCjB,QAAQC,IAAIU,EAAEQ,OAAOF,QAqBbG,YAAY,kBACZ9B,MAAO,CAAEC,MAAO,WAEpB,kBAAC8B,EAAA,EAAD,CAAQL,KAAK,SAAS1B,MAAO,CAAEC,MAAO,UAAtC,YC6DG+B,MA3Ff,WAAgB,IAAD,EAKed,mBAAS,IALxB,mBAKLT,EALK,KAKEU,EALF,KAOPc,EAAS,0DAuEf,OAhEAC,qBAAU,WACRC,MAAMF,EAAQ,CACZG,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGnBC,MAAM,SAAAC,GAEL,OAAOA,EAASC,UACfF,MAAO,SAAAG,GAGRtB,EAAUsB,QAGX,IAEHP,qBAAU,WAERC,MAAMF,EAAQ,CACZG,OAAQ,MACRM,KAAMC,KAAKC,UAAUnC,GACrB4B,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAO,GACFnC,QAAQC,IAAIkC,EAAKC,IACjBpC,QAAQC,IAAIkC,EAAKE,WAIpBT,MAAK,SAAAU,GAEFtC,QAAQC,IAAIqC,MAEfC,OAAM,SAAAC,GAEHxC,QAAQC,IAAIuC,QAEf,CAACzC,IAwBF,yBAAKb,UAAU,aACb,yBAAKA,UAAU,OACb,kBAACE,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEO,QAAS,GAAIN,MAAO,UAAtD,eAEA,kBAAC,EAAD,CAAUe,QA1EhB,SAAiBxB,GACf2B,EAAS,CAAC3B,GAAF,mBAAWiB,MAyEaQ,SAAWR,EAAM0C,SAC7C,kBAAC,EAAD,CAAU1C,MAAOA,EAAO2C,gBAzB9B,SAAyBzD,GACvBwB,EACEV,EAAMI,KAAI,SAAArB,GACR,OAAGA,EAAKG,KAAOA,EACN,eACFH,EADL,CAEEK,MAAOL,EAAKK,OAGTL,OAgBmDC,WAXhE,SAAoBE,GAClBwB,EAASV,EAAM4C,QAAO,SAAC7D,GAAW,OAAOA,EAAKG,KAAOA,SAWjD,wCAAa,gCAAUc,EAAM0C,QAA7B,cChFYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMmB,c","file":"static/js/main.69d6259f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { IconButton, ListItem, Typography } from '@material-ui/core/';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nfunction Todo( {todo, removeTodo}) {\r\n\r\n    function HandleRemove() {\r\n        removeTodo(todo.id)\r\n    }\r\n\r\n    return (\r\n        <ListItem id={todo.id} className={todo.done ? 'completed' : ''}>\r\n            <Typography variant=\"body1\" style={{ color: 'white', textDecoration: todo.done ? 'line-through' : null}} >{todo.label}</Typography>\r\n            <IconButton variant=\"contained\" onClick={HandleRemove} style={{ display : 'inline', padding: '0', color: 'white' }}>\r\n            <CloseIcon/>\r\n        </IconButton>\r\n       \r\n        \r\n        \r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React from 'react'\r\nimport Todo from './Todo'\r\nimport { List } from '@material-ui/core/';\r\nfunction Todolist( { todos, removeTodo }){\r\n    console.log(todos);\r\n\r\n    return ( \r\n        <List>\r\n            {\r\n                todos.map((todo,key) => (\r\n                    <Todo key={key} todo={todo} removeTodo={removeTodo}/>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default Todolist;","import React, { useState} from 'react';\r\nimport uuid from \"uuid\";\r\nimport { Button, TextField } from '@material-ui/core/';\r\nfunction Todoform({ addTodo, uniqueId }) {\r\n\r\n    const [ todo, setTodos ] = useState({\r\n        id: \"\",\r\n        label: \"\",\r\n        done: false\r\n    });\r\n\r\n    function handleInputChange(e) {\r\n        setTodos({ ...todo, label: e.target.value })\r\n        console.log(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (todo.label.trim()) {\r\n            \r\n            \r\n            addTodo( { ...todo, id: uniqueId });\r\n            //reset\r\n            setTodos({ ...todo, label: \"\"});\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <form className=\"todo-form\" onSubmit={handleSubmit} style={{ marginBottom: '25px' }}>\r\n            <TextField \r\n                label=\"texto\"\r\n                type=\"text\"\r\n                value={todo.label}    \r\n                onChange={handleInputChange}\r\n                placeholder=\"escribe aquÃ­\"\r\n                style={{ color: 'white' }}\r\n            /> \r\n            <Button type=\"submit\" style={{ color: 'white' }} >Enviar</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Todoform;","import React, { useState, useEffect }  from 'react';\nimport './App.css';\nimport Todolist from './Components/Todolist.jsx'\nimport Todoform from './Components/Todoform.jsx'\nimport Typography from '@material-ui/core/Typography';\n\n\nfunction App() {\n\n  \n\n\n  const [ todos, setTodos ] = useState([]);\n\n  const APIurl = 'https://assets.breatheco.de/apis/fake/todos/user/patote';\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n    \n  }\n\n  useEffect(() => {\n    fetch(APIurl, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then( response => {\n      // console.log(response);\n      return response.json();\n    }).then ( responseJSON => {\n      // console.log(responseJSON);\n      // responseJSON.map((r) => console.log(r))\n      setTodos( responseJSON );\n    })\n\n  }, []);\n\n  useEffect(() => {\n    //cuando se actualiza un elemento\n    fetch(APIurl, {\n      method: \"PUT\",\n      body: JSON.stringify(todos),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then(resp => {\n        console.log(resp.ok); // will be true if the response is successfull\n        console.log(resp.status); // the status code = 200 or code = 400 etc.\n        // console.log(resp.text()); // will try return the exact result as string\n        // return resp.json(); // (returns promise) will try to parse the result as json as return a promise that you can .then for results\n    })\n    .then(data => {\n        //here is were your code should start after the fetch finishes\n        console.log(data); //this will print on the console the exact object received from the server\n    })\n    .catch(error => {\n        //error handling\n        console.log(error);\n    });\n  }, [todos]);\n\n\n\n  function toggleCompleted(id) {\n    setTodos(\n      todos.map(todo => {\n        if(todo.id === id){\n          return {\n            ...todo,\n            done: !todo.done\n          }\n        }\n        return todo; \n      })\n    )\n  }\n\n  function removeTodo(id){\n    setTodos(todos.filter((todo) => { return todo.id !== id }))\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <Typography variant=\"h5\" style={{ padding: 16, color: 'white' }}>QUE HACERES</Typography>\n        \n        <Todoform addTodo={addTodo} uniqueId={ todos.length } />\n        <Todolist todos={todos} toggleCompleted={toggleCompleted} removeTodo={removeTodo}/>\n        <p>Te quedan <strong>{ todos.length }</strong> tareas</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}